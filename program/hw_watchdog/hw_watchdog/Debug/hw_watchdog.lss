
hw_watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800040  00800040  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005cf  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000465  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000383  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	16 c0       	rjmp	.+44     	; 0x38 <__vector_5>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_clear_bss>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	01 c0       	rjmp	.+2      	; 0x2c <.do_clear_bss_start>

0000002a <.do_clear_bss_loop>:
  2a:	1d 93       	st	X+, r17

0000002c <.do_clear_bss_start>:
  2c:	aa 34       	cpi	r26, 0x4A	; 74
  2e:	b2 07       	cpc	r27, r18
  30:	e1 f7       	brne	.-8      	; 0x2a <.do_clear_bss_loop>
  32:	6f d0       	rcall	.+222    	; 0x112 <main>
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_5>:

static volatile int16_t counter_set_2 = 0;
static volatile int16_t counter_set_3 = 0;

// when TIM0 timer triggers, calling this ISR
ISR(TIM0_COMPA_vect){
  38:	1f 93       	push	r17
  3a:	0f 93       	push	r16
  3c:	0f b7       	in	r16, 0x3f	; 63
  3e:	0f 93       	push	r16
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	4f 93       	push	r20
  44:	5f 93       	push	r21
  46:	6f 93       	push	r22
	if(device_0_active){
  48:	45 a1       	lds	r20, 0x45	; 0x800045 <device_0_active>
  4a:	44 23       	and	r20, r20
  4c:	91 f0       	breq	.+36     	; 0x72 <__stack+0x13>
		timer_count_0++;
  4e:	48 a1       	lds	r20, 0x48	; 0x800048 <timer_count_0>
  50:	59 a1       	lds	r21, 0x49	; 0x800049 <timer_count_0+0x1>
  52:	4f 5f       	subi	r20, 0xFF	; 255
  54:	5f 4f       	sbci	r21, 0xFF	; 255
  56:	59 a9       	sts	0x49, r21	; 0x800049 <timer_count_0+0x1>
  58:	48 a9       	sts	0x48, r20	; 0x800048 <timer_count_0>
		
		if(timer_count_0 > TIMER_FREQ * WATCHDOG_SECONDS){
  5a:	48 a1       	lds	r20, 0x48	; 0x800048 <timer_count_0>
  5c:	59 a1       	lds	r21, 0x49	; 0x800049 <timer_count_0+0x1>
  5e:	41 31       	cpi	r20, 0x11	; 17
  60:	57 42       	sbci	r21, 0x27	; 39
  62:	38 f0       	brcs	.+14     	; 0x72 <__stack+0x13>
			counter_set_2 = COUNTER_SET_MAX;
  64:	40 e1       	ldi	r20, 0x10	; 16
  66:	57 e2       	ldi	r21, 0x27	; 39
  68:	53 a9       	sts	0x43, r21	; 0x800043 <counter_set_2+0x1>
  6a:	42 a9       	sts	0x42, r20	; 0x800042 <counter_set_2>
			device_0_active = 0;
  6c:	15 a9       	sts	0x45, r17	; 0x800045 <device_0_active>
			timer_count_0 = 0;
  6e:	19 a9       	sts	0x49, r17	; 0x800049 <timer_count_0+0x1>
  70:	18 a9       	sts	0x48, r17	; 0x800048 <timer_count_0>
		}
	}
	if(device_1_active){
  72:	44 a1       	lds	r20, 0x44	; 0x800044 <device_1_active>
  74:	44 23       	and	r20, r20
  76:	91 f0       	breq	.+36     	; 0x9c <__stack+0x3d>
		timer_count_1++;
  78:	46 a1       	lds	r20, 0x46	; 0x800046 <timer_count_1>
  7a:	57 a1       	lds	r21, 0x47	; 0x800047 <timer_count_1+0x1>
  7c:	4f 5f       	subi	r20, 0xFF	; 255
  7e:	5f 4f       	sbci	r21, 0xFF	; 255
  80:	57 a9       	sts	0x47, r21	; 0x800047 <timer_count_1+0x1>
  82:	46 a9       	sts	0x46, r20	; 0x800046 <timer_count_1>

		if(timer_count_1 > TIMER_FREQ * WATCHDOG_SECONDS){
  84:	46 a1       	lds	r20, 0x46	; 0x800046 <timer_count_1>
  86:	57 a1       	lds	r21, 0x47	; 0x800047 <timer_count_1+0x1>
  88:	41 31       	cpi	r20, 0x11	; 17
  8a:	57 42       	sbci	r21, 0x27	; 39
  8c:	38 f0       	brcs	.+14     	; 0x9c <__stack+0x3d>
			counter_set_3 = COUNTER_SET_MAX;
  8e:	40 e1       	ldi	r20, 0x10	; 16
  90:	57 e2       	ldi	r21, 0x27	; 39
  92:	51 a9       	sts	0x41, r21	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
  94:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
			device_1_active = 0;
  96:	14 a9       	sts	0x44, r17	; 0x800044 <device_1_active>
			timer_count_1 = 0;
  98:	17 a9       	sts	0x47, r17	; 0x800047 <timer_count_1+0x1>
  9a:	16 a9       	sts	0x46, r17	; 0x800046 <timer_count_1>
		}
	}
}
  9c:	6f 91       	pop	r22
  9e:	5f 91       	pop	r21
  a0:	4f 91       	pop	r20
  a2:	0f 91       	pop	r16
  a4:	0f bf       	out	0x3f, r16	; 63
  a6:	0f 91       	pop	r16
  a8:	1f 91       	pop	r17
  aa:	18 95       	reti

000000ac <set_pin>:
    }
}

void set_pin(uint8_t pin, uint8_t state){
	
	if(state){
  ac:	66 23       	and	r22, r22
  ae:	59 f0       	breq	.+22     	; 0xc6 <set_pin+0x1a>
		PORTB |= (1 << pin);
  b0:	62 b1       	in	r22, 0x02	; 2
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <set_pin+0x10>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	8a 95       	dec	r24
  be:	e2 f7       	brpl	.-8      	; 0xb8 <set_pin+0xc>
  c0:	46 2b       	or	r20, r22
  c2:	42 b9       	out	0x02, r20	; 2
  c4:	08 95       	ret
	}
	else{
		PORTB &= ~(1 << pin);
  c6:	62 b1       	in	r22, 0x02	; 2
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <set_pin+0x26>
  ce:	44 0f       	add	r20, r20
  d0:	55 1f       	adc	r21, r21
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <set_pin+0x22>
  d6:	40 95       	com	r20
  d8:	46 23       	and	r20, r22
  da:	42 b9       	out	0x02, r20	; 2
  dc:	08 95       	ret

000000de <init_pins>:
	}
}

void init_pins(){
	
	DDRB = 0b00001100;				// PB3 and PB2 set to output, PB1 and PB0 set to input
  de:	4c e0       	ldi	r20, 0x0C	; 12
  e0:	41 b9       	out	0x01, r20	; 1
	PUEB = 0b00000011;				// PB0 and PB1 pull-up enabled
  e2:	43 e0       	ldi	r20, 0x03	; 3
  e4:	43 b9       	out	0x03, r20	; 3
	set_pin(PINB2, 0);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	e0 df       	rcall	.-64     	; 0xac <set_pin>
	set_pin(PINB3, 0);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	dd df       	rcall	.-70     	; 0xac <set_pin>
  f2:	08 95       	ret

000000f4 <init_timer>:
}

void init_timer(){
	
	TCCR0A = 0b00000000;
  f4:	1e bd       	out	0x2e, r17	; 46
	switch(WAVEFORM_GENERATION_MODE){
		case WAVEFORM_GENERATION_MODE_NORMAL:
			TCCR0B |= 0b00000000;
			break;
		case WAVEFORM_GENERATION_MODE_CTC:
			TCCR0B |= 0b00001000;
  f6:	4d b5       	in	r20, 0x2d	; 45
  f8:	48 60       	ori	r20, 0x08	; 8
  fa:	4d bd       	out	0x2d, r20	; 45
			break;
		case CLOCK_SELECT_BIT_PRESCALE_256:
			TCCR0B |= 0b00000100;
			break;
		case CLOCK_SELECT_BIT_PRESCALE_1024:
			TCCR0B |= 0b00000101;
  fc:	4d b5       	in	r20, 0x2d	; 45
  fe:	45 60       	ori	r20, 0x05	; 5
 100:	4d bd       	out	0x2d, r20	; 45
			break;
		default:
			TCCR0B |= 0b00000000;
	}
	
	OCR0AH = OUTPUT_COMPARE_REGISTER_0_A >> 8;
 102:	17 bd       	out	0x27, r17	; 39
	OCR0AL = OUTPUT_COMPARE_REGISTER_0_A & 0xFF;
 104:	47 e0       	ldi	r20, 0x07	; 7
 106:	46 bd       	out	0x26, r20	; 38
		
	TIMSK0 |= (1 << OCIE0A);		// set interrupt for timer
 108:	4b b5       	in	r20, 0x2b	; 43
 10a:	42 60       	ori	r20, 0x02	; 2
 10c:	4b bd       	out	0x2b, r20	; 43
		
	sei();							// enable interrupts
 10e:	78 94       	sei
 110:	08 95       	ret

00000112 <main>:
	}
}

int main(void)
{
	CCP = 0xD8;						// unlock protected registers
 112:	48 ed       	ldi	r20, 0xD8	; 216
 114:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = 0;						// no divider = 8MHz
 116:	16 bf       	out	0x36, r17	; 54

	init_pins();
 118:	e2 df       	rcall	.-60     	; 0xde <init_pins>
	init_timer();
 11a:	ec df       	rcall	.-40     	; 0xf4 <init_timer>
	
    while (1) 
    {
		if(PINB & PINB0){	// PB0 pulled high
 11c:	40 b1       	in	r20, 0x00	; 0
				device_0_active = 1;
			}
			timer_count_0 = 0;
		}
		
		if(PINB & PINB1){	// PB1 pulled high
 11e:	00 9b       	sbis	0x00, 0	; 0
 120:	07 c0       	rjmp	.+14     	; 0x130 <main+0x1e>
			if(!device_1_active){
 122:	44 a1       	lds	r20, 0x44	; 0x800044 <device_1_active>
 124:	41 13       	cpse	r20, r17
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x1a>
				device_1_active = 1;
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	44 a9       	sts	0x44, r20	; 0x800044 <device_1_active>
			}
			timer_count_1 = 0;
 12c:	17 a9       	sts	0x47, r17	; 0x800047 <timer_count_1+0x1>
 12e:	16 a9       	sts	0x46, r17	; 0x800046 <timer_count_1>
		}
		
		if(counter_set_2 > 0){
 130:	42 a1       	lds	r20, 0x42	; 0x800042 <counter_set_2>
 132:	53 a1       	lds	r21, 0x43	; 0x800043 <counter_set_2+0x1>
 134:	14 17       	cp	r17, r20
 136:	15 07       	cpc	r17, r21
 138:	7c f4       	brge	.+30     	; 0x158 <main+0x46>
			if(counter_set_2 == COUNTER_SET_MAX){
 13a:	42 a1       	lds	r20, 0x42	; 0x800042 <counter_set_2>
 13c:	53 a1       	lds	r21, 0x43	; 0x800043 <counter_set_2+0x1>
 13e:	40 31       	cpi	r20, 0x10	; 16
 140:	57 42       	sbci	r21, 0x27	; 39
 142:	19 f4       	brne	.+6      	; 0x14a <main+0x38>
				set_pin(PINB2, 1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	b1 df       	rcall	.-158    	; 0xac <set_pin>
			}
			counter_set_2--;
 14a:	42 a1       	lds	r20, 0x42	; 0x800042 <counter_set_2>
 14c:	53 a1       	lds	r21, 0x43	; 0x800043 <counter_set_2+0x1>
 14e:	41 50       	subi	r20, 0x01	; 1
 150:	51 0b       	sbc	r21, r17
 152:	53 a9       	sts	0x43, r21	; 0x800043 <counter_set_2+0x1>
 154:	42 a9       	sts	0x42, r20	; 0x800042 <counter_set_2>
 156:	0d c0       	rjmp	.+26     	; 0x172 <main+0x60>
		}
		else if(counter_set_2 == 0){
 158:	42 a1       	lds	r20, 0x42	; 0x800042 <counter_set_2>
 15a:	53 a1       	lds	r21, 0x43	; 0x800043 <counter_set_2+0x1>
 15c:	45 2b       	or	r20, r21
 15e:	49 f4       	brne	.+18     	; 0x172 <main+0x60>
			set_pin(PINB2, 0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	a3 df       	rcall	.-186    	; 0xac <set_pin>
			counter_set_2--;
 166:	42 a1       	lds	r20, 0x42	; 0x800042 <counter_set_2>
 168:	53 a1       	lds	r21, 0x43	; 0x800043 <counter_set_2+0x1>
 16a:	41 50       	subi	r20, 0x01	; 1
 16c:	51 0b       	sbc	r21, r17
 16e:	53 a9       	sts	0x43, r21	; 0x800043 <counter_set_2+0x1>
 170:	42 a9       	sts	0x42, r20	; 0x800042 <counter_set_2>
		}
	
		if(counter_set_3 > 0){
 172:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 174:	51 a1       	lds	r21, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 176:	14 17       	cp	r17, r20
 178:	15 07       	cpc	r17, r21
 17a:	7c f4       	brge	.+30     	; 0x19a <main+0x88>
			if(counter_set_3 == COUNTER_SET_MAX){
 17c:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 17e:	51 a1       	lds	r21, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 180:	40 31       	cpi	r20, 0x10	; 16
 182:	57 42       	sbci	r21, 0x27	; 39
 184:	19 f4       	brne	.+6      	; 0x18c <main+0x7a>
				set_pin(PINB3, 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	90 df       	rcall	.-224    	; 0xac <set_pin>
			}
			counter_set_3--;
 18c:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 18e:	51 a1       	lds	r21, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 190:	41 50       	subi	r20, 0x01	; 1
 192:	51 0b       	sbc	r21, r17
 194:	51 a9       	sts	0x41, r21	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 196:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <main+0xa2>
		}
		else if(counter_set_3 == 0){
 19a:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 19c:	51 a1       	lds	r21, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 19e:	45 2b       	or	r20, r21
 1a0:	49 f4       	brne	.+18     	; 0x1b4 <main+0xa2>
			set_pin(PINB3, 0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	82 df       	rcall	.-252    	; 0xac <set_pin>
			counter_set_3--;
 1a8:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 1aa:	51 a1       	lds	r21, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	41 50       	subi	r20, 0x01	; 1
 1ae:	51 0b       	sbc	r21, r17
 1b0:	51 a9       	sts	0x41, r21	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	47 ec       	ldi	r20, 0xC7	; 199
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	41 50       	subi	r20, 0x01	; 1
 1ba:	50 40       	sbci	r21, 0x00	; 0
 1bc:	e9 f7       	brne	.-6      	; 0x1b8 <main+0xa6>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0xae>
 1c0:	00 00       	nop
 1c2:	ac cf       	rjmp	.-168    	; 0x11c <main+0xa>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
